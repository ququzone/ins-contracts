/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface UpgradedNameWrapperMockInterface extends utils.Interface {
  functions: {
    "ins()": FunctionFragment;
    "registrar()": FunctionFragment;
    "wrapFromUpgrade(bytes,address,uint32,uint64,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "ins" | "registrar" | "wrapFromUpgrade"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ins", values?: undefined): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapFromUpgrade",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapFromUpgrade",
    data: BytesLike
  ): Result;

  events: {
    "NameUpgraded(bytes,address,uint32,uint64,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameUpgraded"): EventFragment;
}

export interface NameUpgradedEventObject {
  name: string;
  wrappedOwner: string;
  fuses: number;
  expiry: BigNumber;
  approved: string;
  extraData: string;
}
export type NameUpgradedEvent = TypedEvent<
  [string, string, number, BigNumber, string, string],
  NameUpgradedEventObject
>;

export type NameUpgradedEventFilter = TypedEventFilter<NameUpgradedEvent>;

export interface UpgradedNameWrapperMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UpgradedNameWrapperMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ins(overrides?: CallOverrides): Promise<[string]>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    wrapFromUpgrade(
      name: PromiseOrValue<BytesLike>,
      wrappedOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ins(overrides?: CallOverrides): Promise<string>;

  registrar(overrides?: CallOverrides): Promise<string>;

  wrapFromUpgrade(
    name: PromiseOrValue<BytesLike>,
    wrappedOwner: PromiseOrValue<string>,
    fuses: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<string>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ins(overrides?: CallOverrides): Promise<string>;

    registrar(overrides?: CallOverrides): Promise<string>;

    wrapFromUpgrade(
      name: PromiseOrValue<BytesLike>,
      wrappedOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NameUpgraded(bytes,address,uint32,uint64,address,bytes)"(
      name?: null,
      wrappedOwner?: null,
      fuses?: null,
      expiry?: null,
      approved?: null,
      extraData?: null
    ): NameUpgradedEventFilter;
    NameUpgraded(
      name?: null,
      wrappedOwner?: null,
      fuses?: null,
      expiry?: null,
      approved?: null,
      extraData?: null
    ): NameUpgradedEventFilter;
  };

  estimateGas: {
    ins(overrides?: CallOverrides): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    wrapFromUpgrade(
      name: PromiseOrValue<BytesLike>,
      wrappedOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapFromUpgrade(
      name: PromiseOrValue<BytesLike>,
      wrappedOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
