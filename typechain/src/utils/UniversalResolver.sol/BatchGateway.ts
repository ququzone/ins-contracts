/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type OffchainLookupCallDataStruct = {
  sender: PromiseOrValue<string>;
  urls: PromiseOrValue<string>[];
  callData: PromiseOrValue<BytesLike>;
};

export type OffchainLookupCallDataStructOutput = [string, string[], string] & {
  sender: string;
  urls: string[];
  callData: string;
};

export interface BatchGatewayInterface extends utils.Interface {
  functions: {
    "query((address,string[],bytes)[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "query"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "query",
    values: [OffchainLookupCallDataStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;

  events: {};
}

export interface BatchGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    query(
      data: OffchainLookupCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  query(
    data: OffchainLookupCallDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    query(
      data: OffchainLookupCallDataStruct[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { failures: boolean[]; responses: string[] }
    >;
  };

  filters: {};

  estimateGas: {
    query(
      data: OffchainLookupCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    query(
      data: OffchainLookupCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
