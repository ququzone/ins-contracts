/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestUnwrap,
  TestUnwrapInterface,
} from "../../../../src/wrapper/mocks/TestUnwrap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract INS",
        name: "_ins",
        type: "address",
      },
      {
        internalType: "contract IBaseRegistrar",
        name: "_registrar",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvedWrapper",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ins",
    outputs: [
      {
        internalType: "contract INS",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrar",
    outputs: [
      {
        internalType: "contract IBaseRegistrar",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentNode",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "label",
        type: "string",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "setSubnodeRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wrapper",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setWrapperApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "label",
        type: "string",
      },
      {
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "wrapETH2LD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "wrapFromUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051620013ce380380620013ce833981016040819052610031916100b9565b61003a33610051565b6001600160a01b039182166080521660a0526100f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100b657600080fd5b50565b600080604083850312156100cc57600080fd5b82516100d7816100a1565b60208401519092506100e8816100a1565b809150509250929050565b60805160a051611285620001496000396000818160f001528181610a4601528181610b7b01528181610c980152610d46015260008181610141015281816105490152818161067e015261079b01526112856000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063c6d6d7c11161005b578063c6d6d7c11461019c578063f2fde38b146101cf578063f9547a9e146101e257600080fd5b80638da5cb5b1461016b5780639198c2761461018957600080fd5b80632b20e397116100a75780632b20e397146100eb5780636f14a0d11461013c578063715018a61461016357600080fd5b80630cc17365146100c357806324c1af44146100d8575b600080fd5b6100d66100d1366004610e0f565b6101f5565b005b6100d66100e6366004610ea3565b610253565b6101127f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101127f000000000000000000000000000000000000000000000000000000000000000081565b6100d661027d565b60005473ffffffffffffffffffffffffffffffffffffffff16610112565b6100d6610197366004611018565b610291565b6101bf6101aa3660046110d3565b60016020526000908152604090205460ff1681565b6040519015158152602001610133565b6100d66101dd3660046110d3565b610381565b6100d66101f03660046110f7565b61043d565b6101fd610467565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60006102668888805190602001206104e8565b9050610273818733610517565b5050505050505050565b610285610467565b61028f60006107f3565b565b6000806102d860008b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506108689050565b915091506000610321828c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506109399050565b9050600061032f82856104e8565b90507f4d496d39620b55c4f5db9cb2df5c45e4bb3cd662f6293bc88a881df4f6197c6b820161036857610363848b33610a12565b610373565b610373818b33610517565b505050505050505050505050565b610389610467565b73ffffffffffffffffffffffffffffffffffffffff8116610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61043a816107f3565b50565b61045f8686604051610450929190611181565b60405180910390208533610a12565b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610428565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906302571be390602401602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190611191565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205490915060ff16801561062c57508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80156106e957506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e991906111ae565b61074f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e617574686f726973656400000000000000000000000000000000000000006044820152606401610428565b6040517f5b0fc9c30000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301527f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c390604401600060405180830381600087803b1580156107df57600080fd5b505af1158015610273573d6000803e3d6000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080835183106108d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610428565b60008484815181106108e9576108e96111cb565b016020015160f81c905080156109155761090e85610908866001611229565b83610dab565b925061091a565b600092505b6109248185611229565b61092f906001611229565b9150509250929050565b60008060006109488585610868565b9092509050816109d45760018551610960919061123c565b84146109c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610428565b50600091506105119050565b6109de8582610939565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810184905283906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611191565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604090205490915060ff168015610b2957508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b8015610be657506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be691906111ae565b610c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e617574686f726973656400000000000000000000000000000000000000006044820152606401610428565b6040517f28ed4f6c0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff85811660248301527f000000000000000000000000000000000000000000000000000000000000000016906328ed4f6c90604401600060405180830381600087803b158015610cdc57600080fd5b505af1158015610cf0573d6000803e3d6000fd5b50506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528781166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001692506323b872dd9150606401600060405180830381600087803b158015610d8c57600080fd5b505af1158015610da0573d6000803e3d6000fd5b505050505050505050565b8251600090610dba8385611229565b1115610dc557600080fd5b5091016020012090565b73ffffffffffffffffffffffffffffffffffffffff8116811461043a57600080fd5b8035610dfc81610dcf565b919050565b801515811461043a57600080fd5b60008060408385031215610e2257600080fd5b8235610e2d81610dcf565b91506020830135610e3d81610e01565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803567ffffffffffffffff81168114610dfc57600080fd5b803563ffffffff81168114610dfc57600080fd5b600080600080600080600060e0888a031215610ebe57600080fd5b87359650602088013567ffffffffffffffff80821115610edd57600080fd5b818a0191508a601f830112610ef157600080fd5b813581811115610f0357610f03610e48565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610f4957610f49610e48565b816040528281528d6020848701011115610f6257600080fd5b82602086016020830137600060208483010152809a505050505050610f8960408901610df1565b9450610f9760608901610df1565b9350610fa560808901610e77565b9250610fb360a08901610e8f565b9150610fc160c08901610e77565b905092959891949750929550565b60008083601f840112610fe157600080fd5b50813567ffffffffffffffff811115610ff957600080fd5b60208301915083602082850101111561101157600080fd5b9250929050565b60008060008060008060008060c0898b03121561103457600080fd5b883567ffffffffffffffff8082111561104c57600080fd5b6110588c838d01610fcf565b909a50985060208b0135915061106d82610dcf565b81975061107c60408c01610e8f565b965061108a60608c01610e77565b955060808b0135915061109c82610dcf565b90935060a08a013590808211156110b257600080fd5b506110bf8b828c01610fcf565b999c989b5096995094979396929594505050565b6000602082840312156110e557600080fd5b81356110f081610dcf565b9392505050565b60008060008060008060a0878903121561111057600080fd5b863567ffffffffffffffff81111561112757600080fd5b61113389828a01610fcf565b909750955050602087013561114781610dcf565b935061115560408801610e8f565b925061116360608801610e77565b9150608087013561117381610dcf565b809150509295509295509295565b8183823760009101908152919050565b6000602082840312156111a357600080fd5b81516110f081610dcf565b6000602082840312156111c057600080fd5b81516110f081610e01565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610511576105116111fa565b81810381811115610511576105116111fa56fea26469706673582212203c0bbdc3cb3d50bcc526288eb8941efcfade37ffd713eaba7205cb1dda0576de64736f6c63430008110033";

type TestUnwrapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUnwrapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUnwrap__factory extends ContractFactory {
  constructor(...args: TestUnwrapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ins: PromiseOrValue<string>,
    _registrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUnwrap> {
    return super.deploy(
      _ins,
      _registrar,
      overrides || {}
    ) as Promise<TestUnwrap>;
  }
  override getDeployTransaction(
    _ins: PromiseOrValue<string>,
    _registrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ins, _registrar, overrides || {});
  }
  override attach(address: string): TestUnwrap {
    return super.attach(address) as TestUnwrap;
  }
  override connect(signer: Signer): TestUnwrap__factory {
    return super.connect(signer) as TestUnwrap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUnwrapInterface {
    return new utils.Interface(_abi) as TestUnwrapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUnwrap {
    return new Contract(address, _abi, signerOrProvider) as TestUnwrap;
  }
}
