/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UpgradedNameWrapperMock,
  UpgradedNameWrapperMockInterface,
} from "../../../../src/wrapper/mocks/UpgradedNameWrapperMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract INS",
        name: "_ins",
        type: "address",
      },
      {
        internalType: "contract IBaseRegistrar",
        name: "_registrar",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "fuses",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "NameUpgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "ins",
    outputs: [
      {
        internalType: "contract INS",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrar",
    outputs: [
      {
        internalType: "contract IBaseRegistrar",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "fuses",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "wrapFromUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610ba4380380610ba483398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a051610acd6100d760003960008181604b015281816101e601526102d3015260008181609b015281816103e101526104ce0152610acd6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632b20e397146100465780636f14a0d1146100965780639198c276146100bd575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100d06100cb366004610841565b6100d2565b005b60008061011960008b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506105f49050565b915091506000610162828c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106c59050565b604080516020808201849052818301879052825180830384018152606090920190925280519101209091507f4d496d39620b55c4f5db9cb2df5c45e4bb3cd662f6293bc88a881df4f6197c6b82016103af576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015610242573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610266919061090e565b90503373ffffffffffffffffffffffffffffffffffffffff821614801561033e57506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa15801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e9190610932565b6103a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f20617070726f76616c20666f72207265676973747261720000000000000060448201526064015b60405180910390fd5b506105a1565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906302571be390602401602060405180830381865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610461919061090e565b90503373ffffffffffffffffffffffffffffffffffffffff821614801561053957506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610932565b61059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f20617070726f76616c20666f72207265676973747279000000000000000060448201526064016103a0565b505b7f6e636de646f102095de8bb2bf86c20097becf93303a00c722607805b6bc6e2458c8c8c8c8c8c8c8c6040516105de98979695949392919061099d565b60405180910390a1505050505050505050505050565b60008083518310610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016103a0565b600084848151811061067557610675610a13565b016020015160f81c905080156106a15761069a85610694866001610a71565b8361079f565b92506106a6565b600092505b6106b08185610a71565b6106bb906001610a71565b9150509250929050565b60008060006106d485856105f4565b90925090508161076057600185516106ec9190610a84565b8414610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016103a0565b50600091506107999050565b61076a85826106c5565b604080516020810192909252810183905260600160405160208183030381529060405280519060200120925050505b92915050565b82516000906107ae8385610a71565b11156107b957600080fd5b5091016020012090565b60008083601f8401126107d557600080fd5b50813567ffffffffffffffff8111156107ed57600080fd5b60208301915083602082850101111561080557600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461082e57600080fd5b50565b803561083c8161080c565b919050565b60008060008060008060008060c0898b03121561085d57600080fd5b883567ffffffffffffffff8082111561087557600080fd5b6108818c838d016107c3565b909a50985060208b013591506108968261080c565b90965060408a01359063ffffffff821682146108b157600080fd5b90955060608a01359080821682146108c857600080fd5b8195506108d760808c01610831565b945060a08b01359150808211156108ed57600080fd5b506108fa8b828c016107c3565b999c989b5096995094979396929594505050565b60006020828403121561092057600080fd5b815161092b8161080c565b9392505050565b60006020828403121561094457600080fd5b8151801515811461092b57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60c0815260006109b160c083018a8c610954565b73ffffffffffffffffffffffffffffffffffffffff898116602085015263ffffffff8916604085015267ffffffffffffffff881660608501528616608084015282810360a0840152610a04818587610954565b9b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561079957610799610a42565b8181038181111561079957610799610a4256fea2646970667358221220c762503e57c6d214d18e830df340dc9cdeab7e32b97d2989a67e4e20f18848bf64736f6c63430008110033";

type UpgradedNameWrapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradedNameWrapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradedNameWrapperMock__factory extends ContractFactory {
  constructor(...args: UpgradedNameWrapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ins: PromiseOrValue<string>,
    _registrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UpgradedNameWrapperMock> {
    return super.deploy(
      _ins,
      _registrar,
      overrides || {}
    ) as Promise<UpgradedNameWrapperMock>;
  }
  override getDeployTransaction(
    _ins: PromiseOrValue<string>,
    _registrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ins, _registrar, overrides || {});
  }
  override attach(address: string): UpgradedNameWrapperMock {
    return super.attach(address) as UpgradedNameWrapperMock;
  }
  override connect(signer: Signer): UpgradedNameWrapperMock__factory {
    return super.connect(signer) as UpgradedNameWrapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradedNameWrapperMockInterface {
    return new utils.Interface(_abi) as UpgradedNameWrapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradedNameWrapperMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UpgradedNameWrapperMock;
  }
}
