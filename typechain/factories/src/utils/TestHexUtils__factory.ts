/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestHexUtils,
  TestHexUtilsInterface,
} from "../../../src/utils/TestHexUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "idx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastInx",
        type: "uint256",
      },
    ],
    name: "hexStringToBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "idx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastInx",
        type: "uint256",
      },
    ],
    name: "hexToAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610348806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a2988c01461003b578063437276d41461007f575b600080fd5b61004e610049366004610253565b6100a7565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683529015156020830152015b60405180910390f35b61009261008d366004610253565b6100fc565b60408051928352901515602083015201610076565b6000806100ef848488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506101449050565b9150915094509492505050565b6000806100ef848488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506101829050565b600080602861015385856102d2565b10156101645750600090508061017a565b600080610172878787610182565b909450925050505b935093915050565b825160009060019083111561019657600080fd5b6101e7565b6000603a8210602f831116156101b35750602f190190565b604782106040831116156101c957506036190190565b606782106060831116156101df57506056190190565b5060ff919050565b60208501845b84811015610249576102048183015160001a61019b565b6102166001830184015160001a61019b565b60ff811460ff8314171561022f57600094505050610249565b60049190911b1760089490941b93909317926002016101ed565b5050935093915050565b6000806000806060858703121561026957600080fd5b843567ffffffffffffffff8082111561028157600080fd5b818701915087601f83011261029557600080fd5b8135818111156102a457600080fd5b8860208285010111156102b657600080fd5b6020928301999098509187013596604001359550909350505050565b8181038181111561030c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212209529edc354e823f519cb4f7ec5185bde49512ecefffa537a4a003c0298fe879f64736f6c63430008110033";

type TestHexUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHexUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHexUtils__factory extends ContractFactory {
  constructor(...args: TestHexUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestHexUtils> {
    return super.deploy(overrides || {}) as Promise<TestHexUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHexUtils {
    return super.attach(address) as TestHexUtils;
  }
  override connect(signer: Signer): TestHexUtils__factory {
    return super.connect(signer) as TestHexUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHexUtilsInterface {
    return new utils.Interface(_abi) as TestHexUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHexUtils {
    return new Contract(address, _abi, signerOrProvider) as TestHexUtils;
  }
}
