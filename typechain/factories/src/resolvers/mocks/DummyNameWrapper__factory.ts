/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DummyNameWrapper,
  DummyNameWrapperInterface,
} from "../../../../src/resolvers/mocks/DummyNameWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636352211e14602d575b600080fd5b603d60383660046066565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600060208284031215607757600080fd5b503591905056fea2646970667358221220a717661b42e74d940e8a059cc097d6eb40d29b145ca4c699875e95317eab7fe264736f6c63430008110033";

type DummyNameWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyNameWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyNameWrapper__factory extends ContractFactory {
  constructor(...args: DummyNameWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyNameWrapper> {
    return super.deploy(overrides || {}) as Promise<DummyNameWrapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DummyNameWrapper {
    return super.attach(address) as DummyNameWrapper;
  }
  override connect(signer: Signer): DummyNameWrapper__factory {
    return super.connect(signer) as DummyNameWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyNameWrapperInterface {
    return new utils.Interface(_abi) as DummyNameWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyNameWrapper {
    return new Contract(address, _abi, signerOrProvider) as DummyNameWrapper;
  }
}
