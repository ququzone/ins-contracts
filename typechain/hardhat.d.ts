/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseRegistrarImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistrarImplementation__factory>;
    getContractFactory(
      name: "BulkRenewal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BulkRenewal__factory>;
    getContractFactory(
      name: "DummyOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyOracle__factory>;
    getContractFactory(
      name: "ExponentialPremiumPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExponentialPremiumPriceOracle__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "IBulkRenewal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBulkRenewal__factory>;
    getContractFactory(
      name: "IIOTXRegistrarController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIOTXRegistrarController__factory>;
    getContractFactory(
      name: "ILinearPremiumPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinearPremiumPriceOracle__factory>;
    getContractFactory(
      name: "IOTXRegistrarController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOTXRegistrarController__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "LinearPremiumPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearPremiumPriceOracle__factory>;
    getContractFactory(
      name: "DummyProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyProxyRegistry__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "StablePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StablePriceOracle__factory>;
    getContractFactory(
      name: "StaticBulkRenewal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StaticBulkRenewal__factory>;
    getContractFactory(
      name: "TestResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestResolver__factory>;
    getContractFactory(
      name: "INS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INS__factory>;
    getContractFactory(
      name: "INSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INSRegistry__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "DummyNameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyNameWrapper__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "OwnedResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnedResolver__factory>;
    getContractFactory(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABIResolver__factory>;
    getContractFactory(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddrResolver__factory>;
    getContractFactory(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentHashResolver__factory>;
    getContractFactory(
      name: "ExtendedResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtendedResolver__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IExtendedDNSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtendedDNSResolver__factory>;
    getContractFactory(
      name: "IExtendedResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtendedResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "IVersionableResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersionableResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PubkeyResolver__factory>;
    getContractFactory(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TextResolver__factory>;
    getContractFactory(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicResolver__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverBase__factory>;
    getContractFactory(
      name: "IReverseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReverseRegistrar__factory>;
    getContractFactory(
      name: "ReverseClaimer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseClaimer__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "ReverseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseRegistrar__factory>;
    getContractFactory(
      name: "Controllable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controllable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Root",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Root__factory>;
    getContractFactory(
      name: "ERC20Recoverable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Recoverable__factory>;
    getContractFactory(
      name: "TestHexUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHexUtils__factory>;
    getContractFactory(
      name: "TestNameEncoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNameEncoder__factory>;
    getContractFactory(
      name: "BatchGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchGateway__factory>;
    getContractFactory(
      name: "UniversalResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalResolver__factory>;
    getContractFactory(
      name: "Controllable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controllable__factory>;
    getContractFactory(
      name: "ERC1155Fuse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Fuse__factory>;
    getContractFactory(
      name: "IMetadataService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetadataService__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "INameWrapperUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapperUpgrade__factory>;
    getContractFactory(
      name: "ERC1155ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverMock__factory>;
    getContractFactory(
      name: "TestUnwrap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUnwrap__factory>;
    getContractFactory(
      name: "UpgradedNameWrapperMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradedNameWrapperMock__factory>;
    getContractFactory(
      name: "NameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameWrapper__factory>;
    getContractFactory(
      name: "StaticMetadataService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StaticMetadataService__factory>;
    getContractFactory(
      name: "NameGriefer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameGriefer__factory>;
    getContractFactory(
      name: "TestBytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBytesUtils__factory>;
    getContractFactory(
      name: "TestNameWrapperReentrancy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNameWrapperReentrancy__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseRegistrarImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistrarImplementation>;
    getContractAt(
      name: "BulkRenewal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BulkRenewal>;
    getContractAt(
      name: "DummyOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyOracle>;
    getContractAt(
      name: "ExponentialPremiumPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExponentialPremiumPriceOracle>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "IBulkRenewal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBulkRenewal>;
    getContractAt(
      name: "IIOTXRegistrarController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIOTXRegistrarController>;
    getContractAt(
      name: "ILinearPremiumPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinearPremiumPriceOracle>;
    getContractAt(
      name: "IOTXRegistrarController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOTXRegistrarController>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "LinearPremiumPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearPremiumPriceOracle>;
    getContractAt(
      name: "DummyProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyProxyRegistry>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "StablePriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StablePriceOracle>;
    getContractAt(
      name: "StaticBulkRenewal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StaticBulkRenewal>;
    getContractAt(
      name: "TestResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestResolver>;
    getContractAt(
      name: "INS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INS>;
    getContractAt(
      name: "INSRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INSRegistry>;
    getContractAt(
      name: "IMulticallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "DummyNameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyNameWrapper>;
    getContractAt(
      name: "Multicallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "OwnedResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnedResolver>;
    getContractAt(
      name: "ABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ABIResolver>;
    getContractAt(
      name: "AddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddrResolver>;
    getContractAt(
      name: "ContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentHashResolver>;
    getContractAt(
      name: "ExtendedResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtendedResolver>;
    getContractAt(
      name: "IABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IExtendedDNSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtendedDNSResolver>;
    getContractAt(
      name: "IExtendedResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtendedResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "InterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "IVersionableResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersionableResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "PubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PubkeyResolver>;
    getContractAt(
      name: "TextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TextResolver>;
    getContractAt(
      name: "PublicResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicResolver>;
    getContractAt(
      name: "Resolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "ResolverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverBase>;
    getContractAt(
      name: "IReverseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReverseRegistrar>;
    getContractAt(
      name: "ReverseClaimer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseClaimer>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "ReverseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseRegistrar>;
    getContractAt(
      name: "Controllable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controllable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Root",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Root>;
    getContractAt(
      name: "ERC20Recoverable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Recoverable>;
    getContractAt(
      name: "TestHexUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHexUtils>;
    getContractAt(
      name: "TestNameEncoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNameEncoder>;
    getContractAt(
      name: "BatchGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchGateway>;
    getContractAt(
      name: "UniversalResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalResolver>;
    getContractAt(
      name: "Controllable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controllable>;
    getContractAt(
      name: "ERC1155Fuse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Fuse>;
    getContractAt(
      name: "IMetadataService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetadataService>;
    getContractAt(
      name: "INameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "INameWrapperUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapperUpgrade>;
    getContractAt(
      name: "ERC1155ReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverMock>;
    getContractAt(
      name: "TestUnwrap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUnwrap>;
    getContractAt(
      name: "UpgradedNameWrapperMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradedNameWrapperMock>;
    getContractAt(
      name: "NameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameWrapper>;
    getContractAt(
      name: "StaticMetadataService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StaticMetadataService>;
    getContractAt(
      name: "NameGriefer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameGriefer>;
    getContractAt(
      name: "TestBytesUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBytesUtils>;
    getContractAt(
      name: "TestNameWrapperReentrancy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNameWrapperReentrancy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
